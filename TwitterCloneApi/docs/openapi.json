{
  "openapi": "3.1.0",
  "info": {
    "title": "Twitter Clone API",
    "description": "API for the Twitter Clone application",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local server"
    },
    {
      "url": "https://twitter-clone-api.herokuapp.com",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [
    {
      "name": "Test",
      "description": "Test endpoints"
    },
    {
      "name": "Auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "Posts",
      "description": "Post endpoints"
    },
    {
      "name": "Users",
      "description": "Users endpoints"
    },
    {
      "name": "Followers",
      "description": "Follower endpoints"
    }
  ],
  "paths": {
    "/api": {
      "get": {
        "summary": "Test endpoint",
        "description": "Used to check if the API is up and working",
        "tags": ["Test"],
        "responses": {
          "200": {
            "description": "API is up and working"
          }
        }
      }
    },
    "/api/v1/auth/register": {
      "post": {
        "summary": "Register",
        "description": "Register to the application",
        "tags": ["Auth"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "examples": ["joblipat"]
                  },
                  "password": {
                    "type": "string",
                    "examples": ["password"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Register successful"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "summary": "Login",
        "description": "Login to the application",
        "tags": ["Auth"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "examples": ["joblipat"]
                  },
                  "password": {
                    "type": "string",
                    "examples": ["password"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "JWT token",
                      "examples": ["eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9"]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/v1/posts": {
      "get": {
        "summary": "Get Post",
        "description": "Allows you to get posts of the logged in user",
        "tags": ["Posts"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "user",
            "description": "If a value is provided, the endpoint will get the posts of the specified user",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Posts have been retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Post ID",
                        "examples": ["1"]
                      },
                      "content": {
                        "type": "string",
                        "description": "Post content",
                        "examples": [
                          "Hello world. I'm using the newest and latest social media website!"
                        ]
                      },
                      "likes": {
                        "type": "integer",
                        "description": "Number of likes",
                        "examples": ["1"]
                      },
                      "liked": {
                        "type": "boolean",
                        "description": "Whether the post has been liked by the logged in user",
                        "examples": ["true"]
                      },
                      "createdAt": {
                        "type": "string",
                        "description": "Date the post was created",
                        "examples": ["2021-08-01T00:00:00.000Z"]
                      }
                    }
                  },
                  "examples": [
                    null,
                    {
                      "id": "1",
                      "content": "Hello world. This is the first post",
                      "likes": "1",
                      "liked": "true",
                      "createdAt": "2021-08-01T00:00:00.000Z"
                    },
                    {
                      "id": "2",
                      "content": "Good morning. This is the second post",
                      "likes": "2",
                      "liked": "true",
                      "createdAt": "2021-08-01T00:00:00.000Z"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      },
      "post": {
        "summary": "Create Post",
        "description": "Create a post",
        "tags": ["Posts"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "The content of the post. The post must be at most 280 characters",
                    "examples": [
                      "Hello world. I'm using the newest and latest social media website!"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/posts/:id": {
      "patch": {
        "summary": "Like or Unlike Post",
        "description": "Like or Unlike provided post",
        "tags": ["Posts"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Post ID",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string",
                    "enum": ["like", "unlike"]
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Post has been liked or unliked"
            },
            "400": {
              "description": "Bad request."
            },
            "404": {
              "description": "Post does not exist"
            }
          }
        }
      }
    },
    "/api/v1/users/": {
      "get": {
        "summary": "Get uers",
        "description": "Gets the usernames of the users that are registered in the application",
        "tags": ["Users"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Following successfully fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "examples": [null, "joblipat", "jacoblee", "johnjoseph"]
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/:username/following": {
      "get": {
        "summary": "Get following",
        "description": "Gets the usernames of the users that the logged in user is following",
        "tags": ["Followers"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "Username of the user to get the following of",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Following successfully fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "examples": [null, "joblipat", "jacoblee", "johnjoseph"]
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/:username/following/:following": {
      "post": {
        "summary": "Follow user",
        "description": "Follow a user",
        "tags": ["Followers"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "Username of the user who is going to follow",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "following",
            "description": "Username of the user to follow",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "User has successfully been followed"
          },
          "400": {
            "description": "Bad request. User to follow does not exist"
          },
          "401": {
            "description": "Unauthorized. User is not logged in or username in path does not match logged in user"
          }
        }
      },
      "delete": {
        "summary": "Unfollow user",
        "description": "Unfollow a user",
        "tags": ["Followers"],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "description": "Username of the user who is going to unfollow",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "following",
            "description": "Username of the user to unfollow",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User has successfully been unfollowed"
          },
          "400": {
            "description": "Bad request. User to unfollow does not exist"
          },
          "401": {
            "description": "Unauthorized. User is not logged in or username in path does not match logged in user"
          }
        }
      }
    }
  }
}
